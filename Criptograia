from cryptography.fernet import Fernet
import os
from kivy.lang import Builder
from kivymd.app import App
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDIconButton
from kivymd.uix.label import MDLabel
from kivymd.uix.textfield import MDTextField
from kivymd.uix.dialog import MDDialog

class Cripto(App):
    def build(self):
        # Layout principal
        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        # Título
        titulo = Label(text="Criptografia de Arquivos", font_size=24, size_hint=(1, None), height=40)
        layout.add_widget(titulo)

        # Campo de entrada para o nome do arquivo
        self.nome_arquivo_input = TextInput(hint_text="Digite o nome do arquivo", multiline=False, size_hint=(1, None), height=30)
        layout.add_widget(self.nome_arquivo_input)

        # Botão para gerar a chave
        btn_gerar_chave = Button(text="Gerar Chave", size_hint=(1, None), height=40)
        btn_gerar_chave.bind(on_release=self.gerar_chave)
        layout.add_widget(btn_gerar_chave)

        # Botões para criptografar e descriptografar
        btn_criptografar = Button(text="Criptografar", size_hint=(1, None), height=40)
        btn_criptografar.bind(on_release=self.criptografar_arquivo)
        layout.add_widget(btn_criptografar)

        btn_descriptografar = Button(text="Descriptografar", size_hint=(1, None), height=40)
        btn_descriptografar.bind(on_release=self.descriptografar_arquivo)
        layout.add_widget(btn_descriptografar)

        # Label de status
        self.status_label = Label(text="", size_hint=(1, None), height=40)
        layout.add_widget(self.status_label)

        return layout


# Função para gerar e salvar uma chave
    def gerar_chave():
        chave = Fernet.generate_key()
        with open("chave.key", "wb") as chave_arquivo:
            chave_arquivo.write(chave)
        return chave

    # Função para carregar a chave
    def carregar_chave():
        return open("chave.key", "rb").read()

    # Função para criptografar um arquivo
    def criptografar_arquivo(nome_arquivo):
        chave = carregar_chave()
        f = Fernet(chave)

        with open(nome_arquivo, "rb") as arquivo:
            dados = arquivo.read()

        dados_criptografados = f.encrypt(dados)

        with open(nome_arquivo, "wb") as arquivo:
            arquivo.write(dados_criptografados)

        print(f"{nome_arquivo} criptografado com sucesso.")

    # Função para descriptografar um arquivo
    def descriptografar_arquivo(nome_arquivo):
        chave = carregar_chave()
        f = Fernet(chave)

        with open(nome_arquivo, "rb") as arquivo:
            dados_criptografados = arquivo.read()

        dados = f.decrypt(dados_criptografados)

        with open(nome_arquivo, "wb") as arquivo:
            arquivo.write(dados)

        print(f"{nome_arquivo} descriptografado com sucesso.")

    # Função principal
    def main():
        while True:
            acao1 = input("Aperte 4 para gerar uma chave ou Q para sair! ")
            
            if acao1 == '4':
                gerar_chave()
                print("Chave gerada e salva como 'chave.key'.")
                confir = 1

            elif acao1 == 'q':
                break

            if confir >= 1:
                acao = input("Escolha uma ação: [1] Criptografar, [2] Descriptografar, [q] Sair: ")


            if acao == '1':
                    nome_arquivo = input("Digite o nome do arquivo a ser criptografado: ")
                    if os.path.exists(nome_arquivo):
                        criptografar_arquivo(nome_arquivo)
                    else:
                        print("Arquivo não encontrado.")
                
            elif acao == '2':
                    nome_arquivo = input("Digite o nome do arquivo a ser descriptografado: ")
                    if os.path.exists(nome_arquivo):
                        descriptografar_arquivo(nome_arquivo)
                    else:
                        print("Arquivo não encontrado.")

            elif acao == 'q':
                break

            else:
                print("Ação inválida.")


    if __name__ == "__main__":
        main()


